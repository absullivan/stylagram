{"version":3,"sources":["components/Contaner.js","components/Header.js","components/Image.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","props","column","center","height","Navbar","Logo","SearchBar","NavActions","Header","href","src","alt","type","placeholder","ImageContainer","ImageOverlay","Image","metadata","comments","url","ProfileInfo","section","ProfileImage","hasStory","ProfileMetadata","ProfileTitle","FollowButton","button","followed","ProfileStats","ProfileDescription","ProfileImages","Profile","avatar","nickname","posts","followers","following","name","description","images","map","image","index","key","App","Math","floor","random","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da331029.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n    display: flex;\r\n    ${props => (props.column ? 'flex-direction: column' : '')}\r\n    ${props => (props.center ? 'align-items: center;' : '')}\r\n    width: 100%;\r\n    ${props => (props.height ? `height: ${props.height};` : '')}\r\n    margin: 0 auto;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        width: 70%;\r\n    }\r\n\r\n    @media screen and (min-width: 992px) {\r\n        width: 50%;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport NavContainer from './Contaner';\r\n\r\nconst Navbar = styled.div`\r\n    background: #FFF;\r\n    border-bottom: 1px solid rgba(0,0,0, .0975);\r\n    height: 77px;\r\n`;\r\n\r\nconst Logo = styled.div`\r\n    text-align: center;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        text-align: initial;\r\n    }\r\n    \r\n    flex-grow: 1;\r\n\r\n    img {\r\n        height: 29px;\r\n    }\r\n`;\r\n\r\nconst SearchBar = styled.div`\r\n    display: none;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        display: initial;\r\n    }\r\n    \r\n    input {\r\n        background: #fafafa;\r\n        border: solid 1px #dbdbdb;\r\n        border-radius: 3px;\r\n        color: #262626;\r\n        outline: 0;\r\n        text-align: center;\r\n        padding: 3px 10px;\r\n        transition: all .15s;\r\n\r\n        &:focus {\r\n            background: #FFF;\r\n            text-align: left;\r\n        }\r\n\r\n        &::placeholder {\r\n            color: #999;\r\n            font-size: 14px;\r\n            font-weight: 300;\r\n        }\r\n    }\r\n`;\r\n\r\nconst NavActions = styled.div`\r\n    display: none;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        display: flex;\r\n    }\r\n\r\n    justify-content: right;\r\n    flex-grow: 1;\r\n\r\n    button {\r\n        height: 29px;\r\n        margin: 0;\r\n        padding: 0;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        border: 0;\r\n        margin-right: 1.5rem;\r\n\r\n        &:last-child {\r\n            margin-right: 0;\r\n        }\r\n\r\n        img {\r\n            height: 29px;\r\n        }\r\n    }\r\n`;\r\n\r\nfunction Header() {\r\n    return (\r\n        <Navbar>\r\n            <NavContainer center height=\"77px\">\r\n                <Logo>\r\n                    <a href=\"#instagramo\">\r\n                        <img src=\"instagram-logo.png\" alt=\"Instagram\" />\r\n                    </a>\r\n                </Logo>\r\n\r\n                <SearchBar>\r\n                    <input type=\"search\" placeholder=\"Search\" />\r\n                </SearchBar>\r\n\r\n                <NavActions>\r\n                    <button>\r\n                        <img src=\"instagram-discover.png\" alt=\"Discover\" />\r\n                    </button>\r\n\r\n                    <button>\r\n                        <img src=\"instagram-notifications.png\" alt=\"Notifications\" />\r\n                    </button>\r\n\r\n                    <button>\r\n                        <img src=\"instagram-profile.png\" alt=\"Profile\" />\r\n                    </button>\r\n                </NavActions>\r\n            </NavContainer>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ImageContainer = styled.div`\r\n    position: relative;\r\n    flex-basis: 100%;\r\n    padding: 1rem;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        flex-basis: calc(33.333% - 2rem);\r\n    }\r\n\r\n    img {\r\n        cursor: pointer;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst ImageOverlay = styled.div`\r\n    display: none;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    top: 1rem; bottom: 1rem;\r\n    left: 1rem; right: 1rem;\r\n    color: #FFF;\r\n    font-weight: 600;\r\n    background: rgba(0,0,0, .5);\r\n    cursor: pointer;\r\n\r\n    ${ImageContainer}:hover & {\r\n        display: flex !important;\r\n    }\r\n\r\n    img {\r\n        width: 1.5rem;\r\n        margin-right: .5rem;\r\n    }\r\n`;\r\n\r\nfunction Image({ metadata }) {\r\n    return (\r\n        <ImageContainer>\r\n            <ImageOverlay>\r\n                <img src=\"instagram-comments.png\" alt=\"comments\" />\r\n                {metadata.comments}\r\n            </ImageOverlay>\r\n            <img src={metadata.url} alt={metadata.alt} />\r\n        </ImageContainer>\r\n    );\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport ProfileContainer from './Contaner';\r\nimport Image from './Image';\r\n\r\nconst ProfileInfo = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    margin-top: 2rem;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        flex-direction: row;\r\n        margin-top: 3.5rem;\r\n    }\r\n`;\r\n\r\nconst ProfileImage = styled.div`\r\n    width: 150px;\r\n    height: 150px;\r\n    background: #eee;\r\n    color: #eee;\r\n    border-radius: 50%;\r\n    ${props => (props.hasStory ? 'padding: .25rem' : '')}\r\n    ${props => (props.hasStory ? 'border: 2px solid #dd326f' : '')}\r\n    margin: 0 auto 2rem auto;\r\n    flex-shrink: 0;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        flex-direction: row;\r\n        margin: initial;\r\n    }\r\n\r\n    img {\r\n        width: 100%;\r\n        height: 150px;\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst ProfileMetadata = styled.div`\r\n    width: 100%;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        max-width: 60%;\r\n        padding: 0 4rem;\r\n    }\r\n`;\r\n\r\nconst ProfileTitle = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        flex-direction: row;\r\n        align-items: initial;\r\n    }\r\n\r\n    h1 {\r\n        font-size: 1.5rem;\r\n        font-weight: 300;\r\n        margin: 0; padding: 0;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst FollowButton = styled.button`\r\n    background: ${props => props.followed ? 'transparent' : '#3897f0'};\r\n    border: 1px solid ${props => props.followed ? '#dbdbdb' : '#3897f0'} !important;\r\n    color: ${props => props.followed ? '#262626' : '#fff'};\r\n    ${props => props.followed ? 'font-weight: 600;' : ''}\r\n    padding: .25rem 2rem;\r\n    border-radius: 3px;\r\n    border: 0;\r\n    cursor: pointer;\r\n    margin-top: 1rem;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        margin-top: 0;\r\n        margin-left: 1rem;\r\n    }\r\n\r\n    &:hover {\r\n        opacity: .9;\r\n    }\r\n`;\r\n\r\nconst ProfileStats = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 2rem 0;\r\n    font-size: 1rem;\r\n\r\n    @media screen and (min-width: 768px) {\r\n        flex-direction: row;\r\n        align-items: initial;\r\n    }\r\n    \r\n    a, a:visited {\r\n        color: #262626;\r\n        text-decoration: none;\r\n\r\n        @media screen and (min-width: 768px) {\r\n            margin-right: 2rem;\r\n        }\r\n\r\n        &:last-child {\r\n            margin-right: 0;\r\n        }\r\n\r\n        span {\r\n            font-weight: 600;\r\n            padding-right: .5rem;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ProfileDescription = styled.div`\r\n    text-align: center;\r\n    \r\n    @media screen and (min-width: 768px) {\r\n        text-align: initial;\r\n    }\r\n\r\n    p {\r\n        margin: 0;\r\n        padding: .25rem 0;\r\n\r\n        strong {\r\n            font-weight: 600;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ProfileImages = styled.section`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    margin-top: 1.5rem;\r\n`;\r\n\r\nfunction Profile({ metadata }) {\r\n    return (\r\n        <ProfileContainer column>\r\n            <ProfileInfo>\r\n                <ProfileImage hasStory>\r\n                    <img src={metadata.avatar.url} alt={metadata.avatar.alt} />\r\n                </ProfileImage>\r\n\r\n                <ProfileMetadata>\r\n                    <ProfileTitle>\r\n                        <h1>{metadata.nickname}</h1>\r\n                        <FollowButton followed={metadata.followed}>{metadata.followed ? 'Unfollow' : 'Follow'}</FollowButton>\r\n                    </ProfileTitle>\r\n\r\n                    <ProfileStats>\r\n                        <a href=\"#posts\">\r\n                            <span>{metadata.posts}</span>\r\n                            posts\r\n                        </a>\r\n\r\n                        <a href=\"#followers\">\r\n                            <span>{metadata.followers}</span>\r\n                            followers\r\n                        </a>\r\n\r\n                        <a href=\"#following\">\r\n                            <span>{metadata.following}</span>\r\n                            following\r\n                        </a>\r\n                    </ProfileStats>\r\n\r\n                    <ProfileDescription>\r\n                        <p><strong>{metadata.name}</strong></p>\r\n                        <p>{metadata.description}</p>\r\n                    </ProfileDescription>\r\n                </ProfileMetadata>\r\n            </ProfileInfo>\r\n\r\n            <ProfileImages>\r\n                {metadata.images.map((image, index) => <Image metadata={image} key={index} />)}\r\n            </ProfileImages>\r\n        </ProfileContainer>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nimport Header from './components/Header';\r\nimport Profile from './components/Profile';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const metadata = {\r\n    nickname: 'fristys',\r\n    name: 'Momchil Georgiev',\r\n    followed: false,\r\n    avatar: {\r\n      url: 'https://source.unsplash.com/random/150x150',\r\n      alt: 'Random image from the name'\r\n    },\r\n    posts: 179,\r\n    followers: 30,\r\n    following: 47,\r\n    description: 'Once upon a time AWESOME.',\r\n    images: [\r\n      {\r\n        url: 'https://source.unsplash.com/random/600x600',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/650x650',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/700x700',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/750x750',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/800x800',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/850x850',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/500x500',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/550x550',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/555x555',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/666x666',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      },\r\n      {\r\n        url: 'https://source.unsplash.com/random/880x880',\r\n        alt: 'May contain some random stuff',\r\n        comments: Math.floor(Math.random() * 20)\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Profile metadata={metadata} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}